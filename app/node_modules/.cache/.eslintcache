[{"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\index.js":"1","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\App.js":"2","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\UpdateBooking.js":"4","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\inc\\Header.js":"5","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Book.js":"6","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\List.js":"7","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Login.js":"8","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Logout.js":"9","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Register.js":"10","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Home.js":"11","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\LoadingSpinner.js":"12"},{"size":535,"mtime":1674505907748,"results":"13","hashOfConfig":"14"},{"size":992,"mtime":1674805153822,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1674505908156,"results":"16","hashOfConfig":"14"},{"size":1066,"mtime":1674805055741,"results":"17","hashOfConfig":"14"},{"size":1228,"mtime":1674799187450,"results":"18","hashOfConfig":"14"},{"size":11425,"mtime":1674805345808,"results":"19","hashOfConfig":"14"},{"size":5414,"mtime":1674805122530,"results":"20","hashOfConfig":"14"},{"size":5281,"mtime":1674805335558,"results":"21","hashOfConfig":"14"},{"size":253,"mtime":1674779909346,"results":"22","hashOfConfig":"14"},{"size":6555,"mtime":1674805352519,"results":"23","hashOfConfig":"14"},{"size":1164,"mtime":1674805153826,"results":"24","hashOfConfig":"14"},{"size":225,"mtime":1674771192451,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"18sc5wk",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\index.js",[],[],[],"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\App.js",[],[],"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\UpdateBooking.js",[],[],"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\inc\\Header.js",["69","70","71"],[],"import Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport {Link} from \"react-router-dom\"\r\nimport { useState, useEffect } from 'react';\r\nfunction Header() {\r\n    const [islogged, setIsLogged] = useState(false);\r\n    const username = JSON.parse(window.localStorage.getItem('user-info'));\r\n    useEffect(() => {\r\n        if (window.localStorage.getItem('user-info') === null) {\r\n            setIsLogged(true);\r\n        }\r\n    });\r\n    const renderLoogedOut = (\r\n        <>\r\n        <Link to={\"/list\"}>List Bookings</Link>\r\n        <Link to={\"/add\"}>Add Booking</Link>\r\n        <Link to={\"/Logout\"}>Logout</Link>\r\n        </>\r\n    );\r\n    const renderLoogedIn = (\r\n        <>\r\n        <Link to={\"/login\"}>Login</Link>\r\n        <Link to={\"/register\"}>Register</Link>\r\n        </>\r\n    );\r\n  return (\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n          <Navbar.Brand href=\"/\">MoreCorp</Navbar.Brand>\r\n          <Nav className=\"me-auto\">\r\n            \r\n          {localStorage.getItem('user-info') ? renderLoogedOut : renderLoogedIn}\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Book.js",["72"],[],"import Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useState, useEffect } from 'react';\r\nimport LoadingSpinner from \"../LoadingSpinner\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../inc/Header';\r\n\r\nfunction Book() {\r\n    const history = useNavigate();\r\n    useEffect(() => {\r\n        if (!window.localStorage.getItem('user-info')) {\r\n            history('/');\r\n        }\r\n    });\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [startTime, setStartTime] = useState('');\r\n    const [endTime, setEndTime] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const theDate = new Date();\r\n\r\n    //verify email valid\r\n    function isValidEmail(email) {\r\n        return /\\S+@\\S+\\.\\S+/.test(email);\r\n    }\r\n    //validate inputs on change\r\n    const handleChange = (event) => {\r\n        switch (event.target.id) {\r\n            case \"emailAdd\":\r\n                let email = event.target.value;\r\n                // console.warn(email);\r\n                if (!isValidEmail(email)) {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"nameAdd\":\r\n                let password = event.target.value;\r\n                if (password.length > 3) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"contactNum\":\r\n                let contactNum = event.target.value;\r\n                if (contactNum.length > 3) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"message\":\r\n                let messagetrt = event.target.value;\r\n                if (messagetrt.length > 10) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"date\":\r\n                let datet = event.target.value;\r\n                if (datet.length > 3) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"startTime\":\r\n                let startTimeu = event.target.value;\r\n                if (startTimeu.length > 3) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"endTime\":\r\n                let endTimeu = event.target.value;\r\n                if (endTimeu.length > 3) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    const handleFetch = () => {\r\n        setIsLoading(true);\r\n        let data = { 'name': document.getElementById(\"nameAdd\").value, 'email': document.getElementById(\"emailAdd\").value, 'contact_number': document.getElementById(\"contactNum\").value, 'message': document.getElementById(\"message\").value, 'booking_date': document.getElementById(\"date\").value, 'booking_start_time': document.getElementById(\"startTime\").value, 'booking_end_time': document.getElementById(\"endTime\").value }\r\n        let token = JSON.parse(localStorage.getItem('user-info'));\r\n        let auth = 'Bearer ' + token.token;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': auth },\r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n\r\n        fetch(\"http://127.0.0.1:8000/api/booking-create\", requestOptions)\r\n            .then((respose) => respose.json())\r\n            .then((respose) => {\r\n                //    setUsers(respose.data)\r\n                if (respose.success) {\r\n                    alert('saved');\r\n                    setTimeout(() => { history('/') }, 3000);\r\n                } else {\r\n                    setIsLoading(false);\r\n                }\r\n\r\n            })\r\n            .catch(() => {\r\n                setIsLoading(false);\r\n            });\r\n    };\r\n    const renderForm = (\r\n        <div>\r\n\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Body>\r\n                    <Form id='loginform'>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"nameAdd\">Name</Form.Label>\r\n                                <Form.Control size=\"lg\" value={name} id=\"nameAdd\" type=\"text\" name=\"nameAdd\" placeholder=\"User Name\" onChange={(e) => setName(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Nice name!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter name.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"emailAdd\">Email</Form.Label>\r\n                                <Form.Control size=\"lg\" value={email} id=\"emailAdd\" type=\"email\" name=\"emailAdd\" placeholder=\"User Email\" onChange={(e) => setEmail(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter email.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"contactNum\">Contact Number</Form.Label>\r\n                                <Form.Control type=\"text\" value={number} id=\"contactNum\" name=\"contactNum\" placeholder=\"Contact Number\" size=\"lg\" onChange={(e) => setNumber(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Now we are getting there!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter you number.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"message\">Message</Form.Label>\r\n                                <Form.Control type=\"text\" value={message} id=\"message\" name=\"message\" placeholder=\"Message\" size=\"lg\" onChange={(e) => setMessage(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Interesting!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please tell me more.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"date\">Date</Form.Label>\r\n                                <Form.Control type=\"date\" value={date} id=\"date\" name=\"date\" min={theDate} size=\"lg\" onChange={(e) => setDate(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">It's set!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please pick a date.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"startTime\">Start Time</Form.Label>\r\n                                <Form.Control type=\"time\" value={startTime} id=\"startTime\" name=\"startTime\" size=\"lg\" onChange={(e) => setStartTime(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">I'll be there!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please pick a start time.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"endTime\">End Time</Form.Label>\r\n                                <Form.Control type=\"time\" value={endTime} id=\"endTime\" name=\"endTime\" size=\"lg\" onChange={(e) => setEndTime(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">It's a quick one, lol! Now let's save it.</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please pick a end time.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={handleFetch}>\r\n                            Add Item\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>);\r\n    return (\r\n        <>\r\n\r\n            <Header />\r\n            <div className='col-xs-6 col-sm-6 col-md-6 offset-xs-3 offset-sm-3 offset-md-3 login-form'>\r\n                <h2>Add item</h2>\r\n                {isLoading ? <LoadingSpinner /> : renderForm}\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Book;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\List.js",["73","74","75"],[],"import Header from '../inc/Header';\r\nimport { useState, useEffect } from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Book() {\r\n    const username = JSON.parse(window.localStorage.getItem('user-info'));\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const date = new Date();\r\n    let day = date.getDate();\r\n    let sum = (date.getMonth() + 1);\r\n    let month = sum < 10 ? \"0\" + sum : sum;\r\n    let year = date.getFullYear();\r\n\r\n    // This arrangement can be altered based on how we want the date's format to appear.\r\n    let firstDate = `${year}-${month}-01`;\r\n    let lasttDate = `${year}-${month}-28`;\r\n    const [toDate, setToDate] = useState(lasttDate);\r\n    const [fromDate, setFromDate] = useState(firstDate);\r\n    const history = useNavigate();\r\n    useEffect(() => {\r\n        if (!window.localStorage.getItem('user-info')) {\r\n            history('/');\r\n        }\r\n        document.getElementById(\"fromDate\").defaultValue = firstDate;\r\n        document.getElementById(\"toDate\").defaultValue = lasttDate;\r\n        fillTable();\r\n    });\r\n\r\n    function fillTable(){\r\n        let data = { 'from': fromDate, 'to': toDate };\r\n        let token = JSON.parse(localStorage.getItem('user-info'));\r\n        let auth = 'Bearer ' + token.token;\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': auth },\r\n            body: JSON.stringify(data)\r\n        };\r\n        fetch(\"http://127.0.0.1:8000/api/booking-list\", requestOptions)\r\n            .then((respose) => respose.json())\r\n            .then((respose) => {\r\n                console.warn(respose.data.length);\r\n                //    setUsers(respose.data)\r\n                if (respose.data.length > 0) {\r\n                    let source = respose.data;\r\n                    const body = document.getElementById('list'),\r\n                        tbl = document.createElement('table');\r\n                        let header_tr = document.createElement('tr');\r\n                        let th = document.createElement('th');\r\n                        body.innerHTML = \"\";\r\n                        th.appendChild(document.createTextNode(\"Name\"));\r\n                        console.warn(\"big\");\r\n                        header_tr.appendChild(th);\r\n                        let th2 = document.createElement('th');\r\n                        th2.appendChild(document.createTextNode('message'));\r\n                        header_tr.appendChild(th2);\r\n                        let th4 = document.createElement('th');\r\n                        th4.appendChild(document.createTextNode('booking_date'));\r\n                        header_tr.appendChild(th4);\r\n                        tbl.appendChild(header_tr);\r\n                    for (var i = 0; i < source.length; i++) {\r\n\r\n                        let tr = document.createElement('tr');\r\n                        let td = document.createElement('td');\r\n                        td.appendChild(document.createTextNode(source[i]['name'] + \"\\n\"));\r\n                        td.appendChild(document.createTextNode(source[i]['email'] + \"\\n\"));\r\n                        td.appendChild(document.createTextNode(source[i]['contact_number'] + \"\\n\"));\r\n                        tr.appendChild(td);\r\n                        let td2 = document.createElement('td');\r\n                        td2.appendChild(document.createTextNode(source[i]['message']));\r\n                        tr.appendChild(td2);\r\n                        let td4 = document.createElement('td');\r\n                        td4.appendChild(document.createTextNode(source[i]['booking_date'] + \"\\n\"));\r\n                        td4.appendChild(document.createTextNode(source[i]['booking_start_time'] + \"\\n\"));\r\n                        td4.appendChild(document.createTextNode(source[i]['booking_end_time'] + \"\\n\"));\r\n                        tr.appendChild(td4);\r\n                        tbl.appendChild(tr);\r\n\r\n                        console.warn(source[i]);\r\n                    }\r\n                    body.appendChild(tbl);\r\n                    console.warn(\"ran\");\r\n                } else {\r\n                    document.getElementById('list').innerHTML = \"No results\";\r\n                }\r\n\r\n            })\r\n            .catch(() => {\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <Header />\r\n            <h2>{localStorage.getItem('user-info') ? username.name : \"\"} you bookings.</h2>\r\n            <form>\r\n                <Form.Group id=\"filters\">\r\n                    <Form.Label htmlFor=\"fromDate\">From</Form.Label>\r\n                    <Form.Control size=\"lg\" id=\"fromDate\" type=\"date\" value={fromDate} onChange={(e) => setFromDate(e.target.value)} name=\"fromDate\" required />\r\n                    <Form.Label htmlFor=\"toDate\">To</Form.Label>\r\n                    <Form.Control size=\"lg\" id=\"toDate\" type=\"date\" value={toDate} name=\"toDate\" onChange={(e) => setToDate(e.target.value)} required />\r\n                    <Button className={'btn primary-btn'} onClick={fillTable}>Find</Button>\r\n                </Form.Group>\r\n            </form>\r\n            <div id=\"list\">\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Book;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Login.js",["76"],[],"import Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useState, useEffect } from 'react';\r\nimport LoadingSpinner from \"../LoadingSpinner\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../inc/Header';\r\n\r\nfunction Login() {\r\n    const history = useNavigate();\r\n    useEffect(() => {\r\n        if (window.localStorage.getItem('user-info') !== null) {\r\n            history('/');\r\n        }\r\n    });\r\n    const [message, setMessage] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    //verify email valid\r\n    function isValidEmail(email) {\r\n        return /\\S+@\\S+\\.\\S+/.test(email);\r\n    }\r\n    //validate inputs on change\r\n    const handleChange = (event) => {\r\n        switch (event.target.type) {\r\n            case \"email\":\r\n                let email = event.target.value;\r\n                // console.warn(email);\r\n                if (!isValidEmail(email)) {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"password\":\r\n                let password = event.target.value;\r\n                console.warn(password.length);\r\n                if (password.length > 8) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    const handleFetch = () => {\r\n        setIsLoading(true);\r\n        let data = { 'email': document.getElementById(\"emailLogin\").value, 'password': document.getElementById(\"inputPassword\").value }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n\r\n        fetch(\"http://127.0.0.1:8000/api/login\", requestOptions)\r\n            .then((respose) => respose.json())\r\n            .then((respose) => {\r\n                //    setUsers(respose.data)\r\n                if (respose.token) {\r\n                    localStorage.setItem('user-info', JSON.stringify(respose));\r\n                    alert(\"Logged in successfully\");\r\n                    setTimeout(() => { history('/') }, 18000);\r\n                } else {\r\n                    setIsLoading(false);\r\n                    alert(\"Logged in Failed\");\r\n                }\r\n\r\n            })\r\n            .catch(() => {\r\n                setIsLoading(false);\r\n                alert(\"Unable to send request\");\r\n            });\r\n    };\r\n    const renderForm = (\r\n        <div>\r\n\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Body>\r\n                    <Form id='loginform'>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"emaillogin\">Email</Form.Label>\r\n                                <Form.Control size=\"lg\" value={message} id=\"emailLogin\" type=\"email\" name=\"emaillogin\" placeholder=\"User Email\" onChange={(e) => setMessage(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter email.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"inputPassword4\">Password</Form.Label>\r\n                                <Form.Control type=\"password\" value={password} id=\"inputPassword\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Password\" size=\"lg\" onChange={(e) => setPassword(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Let's try login now!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Password too short.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={handleFetch}>\r\n                            Login\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>);\r\n    return (\r\n        <>\r\n        \r\n        <Header />\r\n        <div className='col-xs-6 col-sm-6 col-md-6 offset-xs-3 offset-sm-3 offset-md-3 login-form'>\r\n            <h2>Login</h2>\r\n            {isLoading ? <LoadingSpinner /> : renderForm}\r\n\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Logout.js",[],[],"C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Register.js",["77"],[],"import Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useState, useEffect } from 'react';\r\nimport LoadingSpinner from \"../LoadingSpinner\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from '../inc/Header';\r\n\r\nfunction Register() {\r\n    const history = useNavigate();\r\n    useEffect(() => {\r\n        if (window.localStorage.getItem('user-info') !== null) {\r\n            history('/');\r\n        }\r\n    });\r\n    const [message, setMessage] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    //verify email valid\r\n    function isValidEmail(email) {\r\n        return /\\S+@\\S+\\.\\S+/.test(email);\r\n    }\r\n    //validate inputs on change\r\n    const handleChange = (event) => {\r\n        switch (event.target.type) {\r\n            case \"email\":\r\n                let email = event.target.value;\r\n                // console.warn(email);\r\n                if (!isValidEmail(email)) {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                }\r\n                break;\r\n            case \"password\":\r\n                let password = event.target.value;\r\n                if (password.length > 8) {\r\n                    event.target.classList.remove(\"is-invalid\");\r\n                    event.target.classList.add(\"is-valid\");\r\n                } else {\r\n                    event.target.classList.add(\"is-invalid\");\r\n                    event.target.classList.remove(\"is-valid\");\r\n                }\r\n                break;\r\n                case \"text\":\r\n                    let text = event.target.value;\r\n                    if (text.length > 3) {\r\n                        event.target.classList.remove(\"is-invalid\");\r\n                        event.target.classList.add(\"is-valid\");\r\n                    } else {\r\n                        event.target.classList.add(\"is-invalid\");\r\n                        event.target.classList.remove(\"is-valid\");\r\n                    }\r\n                break;\r\n        }\r\n    };\r\n    const handleFetch = () => {\r\n        setIsLoading(true);\r\n        let data = { 'name': document.getElementById(\"username\").value, 'email': document.getElementById(\"emailReg\").value, 'password': document.getElementById(\"regPassword\").value }\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },\r\n            body: JSON.stringify(data)\r\n        };\r\n\r\n\r\n        fetch(\"http://127.0.0.1:8000/api/register\", requestOptions)\r\n            .then((respose) => respose.json())\r\n            .then((respose) => {\r\n                //    setUsers(respose.data)\r\n                if (respose.token) {\r\n                    localStorage.setItem('user-info', JSON.stringify(respose));\r\n                    alert(\"Logged in successfully\");\r\n                    setTimeout(() => { history('/') }, 3000);\r\n                } else {\r\n                    setIsLoading(false);\r\n                    alert(\"Logged in Failed\");\r\n                }\r\n\r\n            })\r\n            .catch(() => {\r\n                setIsLoading(false);\r\n                alert(\"Unable to send request\");\r\n            });\r\n    };\r\n    const renderForm = (\r\n        <div>\r\n\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Body>\r\n                    <Form id='loginform'>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"username\">Username</Form.Label>\r\n                                <Form.Control size=\"lg\" value={username} id=\"username\" type=\"text\" name=\"username\" placeholder=\"User Name\" onChange={(e) => setUsername(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Nice Name!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter email.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"emailReg\">Email</Form.Label>\r\n                                <Form.Control size=\"lg\" value={message} id=\"emailReg\" type=\"email\" name=\"emailReg\" placeholder=\"User Email\" onChange={(e) => setMessage(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Please enter email.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Row className=\"\">\r\n                            <Form.Group as={Col} md=\"12\">\r\n                                <Form.Label htmlFor=\"regPassword\">Password</Form.Label>\r\n                                <Form.Control type=\"password\" value={password} id=\"regPassword\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Password\" size=\"lg\" onChange={(e) => setPassword(e.target.value)} onBlur={handleChange} required />\r\n                                <Form.Control.Feedback type=\"valid\">Let's register now!</Form.Control.Feedback>\r\n                                <Form.Control.Feedback type=\"invalid\">Password too short.</Form.Control.Feedback>\r\n                            </Form.Group>\r\n                        </Row>\r\n                        <Button variant=\"primary\" size=\"lg\" onClick={handleFetch}>\r\n                            Login\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>);\r\n    return (\r\n        <>\r\n        \r\n        <Header />\r\n        <div className='col-xs-6 col-sm-6 col-md-6 offset-xs-3 offset-sm-3 offset-md-3 login-form'>\r\n            <h2>Register</h2>\r\n            {isLoading ? <LoadingSpinner /> : renderForm}\r\n\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\routes\\Home.js",["78","79"],[],"import { useState, useEffect } from 'react';\r\nimport Header from '../inc/Header';\r\n\r\nfunction Home() {\r\n    const [islogged, setIsLogged] = useState(false);\r\n    const username = JSON.parse(window.localStorage.getItem('user-info'));\r\n    useEffect(() => {\r\n        if (window.localStorage.getItem('user-info') === null) {\r\n            setIsLogged(true);\r\n        }\r\n    });\r\n    const renderLoogedOut = (\r\n        <>\r\n            <h2>Welcome {localStorage.getItem('user-info') ? username.name : \"\"}</h2>\r\n            <p>Thank you for taking the time to login. I hope you enjoy my application.<br />Now that we are logged in you can take a look around.</p>\r\n        </>\r\n    );\r\n    const renderLoogedIn = (\r\n        <div>\r\n            <h2>Welcome to Polok's Scheduler</h2>\r\n            <p>In order to continue please register a new user or use the following user to login</p>\r\n            <p>User Email: test@example.com<br />Password: testing123</p>\r\n        </div>\r\n    );\r\n    return (\r\n        <>\r\n        \r\n        <Header />\r\n            {localStorage.getItem('user-info') ? renderLoogedOut : renderLoogedIn}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\polok\\Work\\morecorp\\frontend\\src\\LoadingSpinner.js",[],[],{"ruleId":"80","severity":1,"message":"81","line":7,"column":12,"nodeType":"82","messageId":"83","endLine":7,"endColumn":20},{"ruleId":"80","severity":1,"message":"84","line":8,"column":11,"nodeType":"82","messageId":"83","endLine":8,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":9,"column":5,"nodeType":"82","endLine":9,"endColumn":14,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":34,"column":9,"nodeType":"90","messageId":"91","endLine":106,"endColumn":10},{"ruleId":"80","severity":1,"message":"92","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":11},{"ruleId":"80","severity":1,"message":"93","line":10,"column":12,"nodeType":"82","messageId":"83","endLine":10,"endColumn":21},{"ruleId":"80","severity":1,"message":"94","line":12,"column":9,"nodeType":"82","messageId":"83","endLine":12,"endColumn":12},{"ruleId":"88","severity":1,"message":"89","line":28,"column":9,"nodeType":"90","messageId":"91","endLine":51,"endColumn":10},{"ruleId":"88","severity":1,"message":"89","line":30,"column":9,"nodeType":"90","messageId":"91","endLine":62,"endColumn":10},{"ruleId":"80","severity":1,"message":"81","line":5,"column":12,"nodeType":"82","messageId":"83","endLine":5,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":7,"column":5,"nodeType":"82","endLine":7,"endColumn":14,"suggestions":"95"},"no-unused-vars","'islogged' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsLogged'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["96"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Col' is defined but never used.","'isLoading' is assigned a value but never used.","'day' is assigned a value but never used.",["97"],{"desc":"98","fix":"99"},{"desc":"98","fix":"100"},"Add dependencies array: []",{"range":"101","text":"102"},{"range":"103","text":"102"},[511,511],", []",[371,371]]