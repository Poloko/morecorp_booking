{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\polok\\\\Work\\\\morecorp\\\\frontend\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport useState from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  async function login_call() {\n    let data = {\n      email,\n      password\n    };\n    fetch(\"\", {\n      method: 'POST',\n      body: JSON.stringify(data),\n      header: {\n        'Content-Type': 'application/json',\n        'accept': 'application/json'\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-xs-6 col-sm-6 col-md-6 offset-xs-3 offset-sm-3 offset-md-3 login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            htmlFor: \"emaillogin\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            size: \"lg\",\n            type: \"email\",\n            value: email,\n            name: \"emaillogin\",\n            placeholder: \"User Email\",\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            htmlFor: \"inputPassword4\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            value: password,\n            id: \"inputPassword4\",\n            name: \"password\",\n            \"aria-describedby\": \"passwordHelpBlock\",\n            placeholder: \"Password\",\n            size: \"lg\",\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            id: \"passwordHelpBlock\",\n            muted: true,\n            children: \"Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          size: \"lg\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"Y7bHT9hHeaSkUMaY2QMcNWLqvG0=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Form","Button","Card","useState","Login","email","setEmail","password","setPassword","login_call","data","fetch","method","body","JSON","stringify","header","width","e","target","value"],"sources":["C:/Users/polok/Work/morecorp/frontend/src/Login.js"],"sourcesContent":["import Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport useState from 'react';\r\n\r\nfunction Login() {\r\n    const [email,setEmail]=useState(\"\");\r\n    const [password,setPassword]=useState(\"\");\r\n\r\n    async function login_call(){\r\n        let data = {email,password};\r\n        fetch(\"\",{\r\n            method:'POST',\r\n            body:JSON.stringify(data),\r\n            header:{\r\n                'Content-Type':'application/json',\r\n                'accept':'application/json'\r\n            }\r\n        })\r\n    }\r\n  return (\r\n    <div className='col-xs-6 col-sm-6 col-md-6 offset-xs-3 offset-sm-3 offset-md-3 login-form'>\r\n        <h2>Login</h2>\r\n        <Card style={{ width: '100%' }}>\r\n      <Card.Body>\r\n        <Card.Text>\r\n      <Form.Label htmlFor=\"emaillogin\">Email</Form.Label>\r\n      <Form.Control size=\"lg\" type=\"email\" value={email} name=\"emaillogin\" placeholder=\"User Email\" onChange={(e)=>setEmail(e.target.value)} />\r\n      <Form.Label htmlFor=\"inputPassword4\">Password</Form.Label>\r\n      <Form.Control type=\"password\" value={password} id=\"inputPassword4\" name=\"password\" aria-describedby=\"passwordHelpBlock\" placeholder=\"Password\" size=\"lg\" onChange={(e)=>setPassword(e.target.value)}/>\r\n      <Form.Text id=\"passwordHelpBlock\" muted>\r\n        Your password must be 8-20 characters long, contain letters and numbers,\r\n        and must not contain spaces, special characters.\r\n      </Form.Text>\r\n     </Card.Text>\r\n     <Button variant=\"primary\" size=\"lg\">\r\n          Login\r\n        </Button>\r\n      </Card.Body>\r\n    </Card>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,sBAAsB;AACvC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,QAAQ,MAAM,OAAO;AAAC;AAE7B,SAASC,KAAK,GAAG;EAAA;EACb,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAACH,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACI,QAAQ,EAACC,WAAW,CAAC,GAACL,QAAQ,CAAC,EAAE,CAAC;EAEzC,eAAeM,UAAU,GAAE;IACvB,IAAIC,IAAI,GAAG;MAACL,KAAK;MAACE;IAAQ,CAAC;IAC3BI,KAAK,CAAC,EAAE,EAAC;MACLC,MAAM,EAAC,MAAM;MACbC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;MACzBM,MAAM,EAAC;QACH,cAAc,EAAC,kBAAkB;QACjC,QAAQ,EAAC;MACb;IACJ,CAAC,CAAC;EACN;EACF,oBACE;IAAK,SAAS,EAAC,2EAA2E;IAAA,wBACtF;MAAA,UAAI;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,eACd,QAAC,IAAI;MAAC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAA,uBACjC,QAAC,IAAI,CAAC,IAAI;QAAA,wBACR,QAAC,IAAI,CAAC,IAAI;UAAA,wBACZ,QAAC,IAAI,CAAC,KAAK;YAAC,OAAO,EAAC,YAAY;YAAA,UAAC;UAAK;YAAA;YAAA;YAAA;UAAA,QAAa,eACnD,QAAC,IAAI,CAAC,OAAO;YAAC,IAAI,EAAC,IAAI;YAAC,IAAI,EAAC,OAAO;YAAC,KAAK,EAAEZ,KAAM;YAAC,IAAI,EAAC,YAAY;YAAC,WAAW,EAAC,YAAY;YAAC,QAAQ,EAAGa,CAAC,IAAGZ,QAAQ,CAACY,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAA;YAAA;YAAA;UAAA,QAAG,eACzI,QAAC,IAAI,CAAC,KAAK;YAAC,OAAO,EAAC,gBAAgB;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAa,eAC1D,QAAC,IAAI,CAAC,OAAO;YAAC,IAAI,EAAC,UAAU;YAAC,KAAK,EAAEb,QAAS;YAAC,EAAE,EAAC,gBAAgB;YAAC,IAAI,EAAC,UAAU;YAAC,oBAAiB,mBAAmB;YAAC,WAAW,EAAC,UAAU;YAAC,IAAI,EAAC,IAAI;YAAC,QAAQ,EAAGW,CAAC,IAAGV,WAAW,CAACU,CAAC,CAACC,MAAM,CAACC,KAAK;UAAE;YAAA;YAAA;YAAA;UAAA,QAAE,eACtM,QAAC,IAAI,CAAC,IAAI;YAAC,EAAE,EAAC,mBAAmB;YAAC,KAAK;YAAA,UAAC;UAGxC;YAAA;YAAA;YAAA;UAAA,QAAY;QAAA;UAAA;UAAA;UAAA;QAAA,QACD,eACZ,QAAC,MAAM;UAAC,OAAO,EAAC,SAAS;UAAC,IAAI,EAAC,IAAI;UAAA,UAAC;QAEjC;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA;IACC;MAAA;MAAA;MAAA;IAAA,QACP;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GArCQhB,KAAK;AAAA,KAALA,KAAK;AAuCd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}